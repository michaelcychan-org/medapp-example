name: iOS Cucumberworkflow

on: [push]

permissions:
  id-token: write
  contents: read

jobs:
  upload-reports:
    name: Upload verification reports
    runs-on: ubuntu-latest
    environment: COAUTHOR

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print out variables
        run: |
          pwd
          echo "${{ env.UPLOAD_JOB }}"
          echo "${{ github.repository }}"
          echo "${{ github.event.pull_request.head.ref }}"
          echo "${{ github.event.pull_request.head.sha }}"
      - name: Set paths
        id: set_paths
        run: |
          path_system="${{ github.repository }}/${{ github.event.pull_request.head.ref }}/${{ github.event.pull_request.head.sha }}/system"
          path_item="${{ github.repository }}/${{ github.event.pull_request.head.ref }}/${{ github.event.pull_request.head.sha }}/item"
          echo "path_system=$path_system" >> $GITHUB_ENV
          echo "path_item=$path_item" >> $GITHUB_ENV
      - name: Create Dummy Verification Test Files
        run: |
          mkdir -p "$path_system"  # Create the directory structure
          mkdir -p "$path_item"  # Create the directory structure
          echo '{"owner": '${{ github.repository_owner }}', "repository": '${{ github.repository }}', "branch": '${{ github.event.pull_request.head.ref }}', "sha": '${{ github.event.pull_request.head.sha }}', "verification": "system", "timestamp": '$(date +%s)'}' > "$path_system/cucumber-messages.ndjson"
          echo '{"owner": '${{ github.repository_owner }}', "repository": '${{ github.repository }}', "branch": '${{ github.event.pull_request.head.ref }}', "sha": '${{ github.event.pull_request.head.sha }}', "verification": "item", "timestamp": '$(date +%s)'}' > "$path_item/cucumber-messages.ndjson"
          echo "File created at: $path_system/cucumber-messages.ndjson"
          echo "File created at: $path_item/cucumber-messages.ndjson"
        env:
          path_system: ${{ env.path_system }}
          path_item: ${{ env.path_item}}
      - name: Upload System Verificaiton
        id: upload-system-ver
        uses: coauthor-app/capture-action@v0.1.0-beta
        with:
          evidence: 'system-verification'
          type: 'bdd'
          format: 'cucumber+ndjson'
          hostname: ${{ env.UPLOAD_JOB }}
          path: '${{ env.path_system }}/**'
      - name: Upload Item Verificaiton
        id: upload-item-ver
        uses: coauthor-app/capture-action@v0.1.0-beta
        with:
          evidence: 'item-verification'
          type: 'bdd'
          format: 'cucumber+ndjson'
          hostname: ${{ env.UPLOAD_JOB }}
          path: '${{ env.path_item }}/**'
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        id: run-tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
          TARGET_DEVICE_PLATFORM_NAME: ${{ 'iphonesimulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
          # Retrieve TARGETNAME dynamically
          TARGETNAME=$(xcodebuild -list | grep -A 1 "Targets:" | tail -n 1 | awk '{$1=$1;print}')
          echo "TARGETNAME=$TARGETNAME"
          
          report_file=$(find ~/Library/Developer/CoreSimulator/Devices/$TARGET_DEVICE_IDENTIFIER -name "CucumberTestResultsForCucumberSwiftSampleUITests.json" -print0 | xargs -r -0 ls -1 -t | head -1)
          echo "Report file: $report_file"
          echo "::set-output name=report_file::$report_file"
          
      - name: Upload Cucumber Test Results
        uses: actions/upload-artifact@v3
        with:
         name: cucumber-test-results
         path: ${{ steps.run-tests.outputs.report_file }}
         
    # - name: Anchore SBOM Action
    #   uses: anchore/sbom-action@v0.16.0
    #   with: 
    #     path: ./build/
