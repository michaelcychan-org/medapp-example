name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print out variables
        run: |
          echo "${{ github.repository_owner }}"
          echo "${{ github.repository }}"
          echo "${{ github.ref }}"
          echo "${{ github.sha }}"
        - name: Set path_item
          id: set_path_item
          run: |
            path_item="${{ github.workspace }}/michaelcychan-org/medapp-example/${{ github.ref }}/${{ github.sha }}"
            echo "path_item=$path_item" >> $GITHUB_ENV
            echo $path_item
        - name: Create Dummy Item Verification Test File
          run: |
            mkdir -p "$path_item"  # Create the directory structure
            echo '{"owner": "{{ github.repository_owner }}", "repository": "{{ github.repository }}", "branch": "{{ github.ref }}", "sha": "{{ github.sha }}", "timestamp": $(date +%s)}' > "$path_item/item-cucumber-messages.ndjson"
            echo "File created at: $path_item/item-cucumber-messages.ndjson"
          env:
            path_item: ${{ env.path_item }}
        - name: Check file permissions
          run: ls "$path_item"
          env:
            path_item: ${{ env.path_item }}
        - name: Show the generated file (optional)
          run: cat "$path_item/item-cucumber-messages.ndjson"
          env:
            path_item: ${{ env.path_item }}
      - name: Upload Item Verificaiton
        id: upload-item-ver
        uses: coauthor-app/capture-action@v0.1.0-beta
        with:
          evidence: 'item-verification'
          type: 'bdd'
          format: 'cucumber+ndjson'
          hostname: 'nll3vb6d1l.execute-api.eu-west-2.amazonaws.com'
          path: $path_item/**
          env:
            path_item: ${{ env.path_item }}
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      - name: Create Dummy System Verification Test File
        run: |
          file_name_system=${{ github.repository_owner }}-${{ github.repo }}-${{ github.base }}-${{ github.sha }}-system-cucumber-messages.ndjson
          echo '{"owner": "{{ github.repository_owner }}", "repository": "{{ github.repo }}", "branch": "{{ github.base }}", "sha": "{{ github.sha }}", "timestamp": $(date +%s)}' > "$file_name_system"
      - name: Show the generated file (optional)
        run: cat "$file_name_system"
      - name: Upload System Verificaiton
        id: upload-system-ver
        uses: coauthor-app/capture-action@v0.1.0-beta
        with:
          evidence: 'system-verification'
          type: 'bdd'
          format: 'cucumber+ndjson'
          hostname: 'nll3vb6d1l.execute-api.eu-west-2.amazonaws.com'
          path: ${{ github.workspace }}/ ${{ github.repository_owner }}-${{ github.repo }}-${{ github.base }}-${{ github.sha }}-system-cucumber-messages.ndjson
      - name: Anchore SBOM Action
        uses: anchore/sbom-action@v0.16.0
        with: 
          path: ./build/
